// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_OrderAll_FullMethodName          = "/order.OrderService/OrderAll"
	OrderService_CancelOrder_FullMethodName       = "/order.OrderService/CancelOrder"
	OrderService_ChangeOrderStatus_FullMethodName = "/order.OrderService/ChangeOrderStatus"
	OrderService_GetAllOrdersUser_FullMethodName  = "/order.OrderService/GetAllOrdersUser"
	OrderService_GetAllOrders_FullMethodName      = "/order.OrderService/GetAllOrders"
	OrderService_GetOrder_FullMethodName          = "/order.OrderService/GetOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	OrderAll(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*OrderId, error)
	CancelOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*OrderId, error)
	ChangeOrderStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*OrderId, error)
	GetAllOrdersUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (OrderService_GetAllOrdersUserClient, error)
	GetAllOrders(ctx context.Context, in *NoArg, opts ...grpc.CallOption) (OrderService_GetAllOrdersClient, error)
	GetOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) OrderAll(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*OrderId, error) {
	out := new(OrderId)
	err := c.cc.Invoke(ctx, OrderService_OrderAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*OrderId, error) {
	out := new(OrderId)
	err := c.cc.Invoke(ctx, OrderService_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ChangeOrderStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*OrderId, error) {
	out := new(OrderId)
	err := c.cc.Invoke(ctx, OrderService_ChangeOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrdersUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (OrderService_GetAllOrdersUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], OrderService_GetAllOrdersUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetAllOrdersUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetAllOrdersUserClient interface {
	Recv() (*GetAllOrdersResponse, error)
	grpc.ClientStream
}

type orderServiceGetAllOrdersUserClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetAllOrdersUserClient) Recv() (*GetAllOrdersResponse, error) {
	m := new(GetAllOrdersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetAllOrders(ctx context.Context, in *NoArg, opts ...grpc.CallOption) (OrderService_GetAllOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[1], OrderService_GetAllOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetAllOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetAllOrdersClient interface {
	Recv() (*GetAllOrdersResponse, error)
	grpc.ClientStream
}

type orderServiceGetAllOrdersClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetAllOrdersClient) Recv() (*GetAllOrdersResponse, error) {
	m := new(GetAllOrdersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	OrderAll(context.Context, *UserId) (*OrderId, error)
	CancelOrder(context.Context, *OrderId) (*OrderId, error)
	ChangeOrderStatus(context.Context, *ChangeStatusRequest) (*OrderId, error)
	GetAllOrdersUser(*UserId, OrderService_GetAllOrdersUserServer) error
	GetAllOrders(*NoArg, OrderService_GetAllOrdersServer) error
	GetOrder(context.Context, *OrderId) (*GetAllOrdersResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) OrderAll(context.Context, *UserId) (*OrderId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAll not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *OrderId) (*OrderId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) ChangeOrderStatus(context.Context, *ChangeStatusRequest) (*OrderId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrdersUser(*UserId, OrderService_GetAllOrdersUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllOrdersUser not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrders(*NoArg, OrderService_GetAllOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetOrder(context.Context, *OrderId) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_OrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderAll(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ChangeOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ChangeOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ChangeOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ChangeOrderStatus(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrdersUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetAllOrdersUser(m, &orderServiceGetAllOrdersUserServer{stream})
}

type OrderService_GetAllOrdersUserServer interface {
	Send(*GetAllOrdersResponse) error
	grpc.ServerStream
}

type orderServiceGetAllOrdersUserServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetAllOrdersUserServer) Send(m *GetAllOrdersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_GetAllOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetAllOrders(m, &orderServiceGetAllOrdersServer{stream})
}

type OrderService_GetAllOrdersServer interface {
	Send(*GetAllOrdersResponse) error
	grpc.ServerStream
}

type orderServiceGetAllOrdersServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetAllOrdersServer) Send(m *GetAllOrdersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrder(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderAll",
			Handler:    _OrderService_OrderAll_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "ChangeOrderStatus",
			Handler:    _OrderService_ChangeOrderStatus_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderService_GetOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllOrdersUser",
			Handler:       _OrderService_GetAllOrdersUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllOrders",
			Handler:       _OrderService_GetAllOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
